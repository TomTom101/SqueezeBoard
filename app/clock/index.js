// Generated by CoffeeScript 1.10.0
angular.module('clock', ['common', 'ngAnimate']).controller('ClockController', [
  '$scope', '$interval', 'ClockService', 'ForecastFactory', 'AirsensorFactory', 'DimmerService', function($scope, $interval, ClockService, ForecastFactory, AirsensorFactory, DimmerService) {
    var dim, getForecast, getTomorrowData, init, initAirvalueStream, setAirColor, temp_scale, tick;
    document.addEventListener('deviceready', function() {
      window.brightness = cordova.require("cordova.plugin.Brightness.Brightness");
      brightness.setKeepScreenOn(true);
      return dim();
    });
    temp_scale = chroma.scale(['#214290', '#3e5296', '#54629d', '#6873a3', '#7a84a9', '#8b97ae', '#9da9b4', '#aebcba', '#bfcebf', '#d0e3c5', '#fdf491', '#f8df81', '#f3cc73', '#edb964', '#e7a555', '#e09247', '#d87e39', '#d06a2c', '#c7561e', '#be3f0f']).domain([-20, 30]);
    init = function() {
      steroids.statusBar.hide();
      $interval(tick, 1000);
      $interval(dim, 1000 * 60 * 10);
      $interval(getForecast, 1000 * 60 * 10);
      $scope.airquality = {
        index: "?"
      };
      setAirColor(0);
      getForecast();
      return initAirvalueStream();
    };
    tick = function() {
      $scope.time = ClockService.getTime();
      return $scope.date = ClockService.getDate();
    };
    dim = function() {
      var d, h;
      h = moment().hour();
      d = DimmerService.dim(h);
      return brightness.setBrightness(d);
    };
    $scope.getTempColor = function(celcius) {
      var color;
      color = temp_scale(celcius);
      return {
        color: color.hex()
      };
    };
    setAirColor = function(hsl) {
      var color;
      color = one.color("hsl(" + hsl + ", 100%, 50%)");
      return $scope.airColor = {
        color: color.hex()
      };
    };
    getTomorrowData = function(response) {
      var find, tomorrow, tomorrow_data;
      tomorrow = moment().add(1, 'd').startOf('day').utc();
      find = find || {};
      steroids.logger.log("Tommorrow is " + (tomorrow.format()));
      find.time = parseInt(tomorrow.format('X'));
      tomorrow_data = _.where(response.daily.data, find);
      return tomorrow_data[0];
    };
    getForecast = function() {
      return ForecastFactory.currentForecast(function(error, response) {
        if (error) {
          return steroids.logger.error("Error occured: " + error);
        } else {
          $scope.weather_current = response.currently;
          $scope.weather_tomorrow = getTomorrowData(response);
          return $scope.message = response.daily.summary;
        }
      });
    };
    initAirvalueStream = function() {
      return AirsensorFactory.streamAirsensor(function(data) {
        return $scope.$apply(function() {
          $scope.airquality = data;
          return setAirColor($scope.airquality.hsl);
        });
      });
    };
    return init();
  }
]).directive('animateOnChange', function($animate, $timeout) {
  return function(scope, elem, attr) {
    return scope.$watch(attr.animateOnChange, function(nv, ov) {
      if (nv !== ov) {
        return $animate.addClass(elem, 'change').then(function() {
          return $timeout(function() {
            return $animate.removeClass(elem, 'change');
          }, 2000);
        });
      }
    });
  };
});
